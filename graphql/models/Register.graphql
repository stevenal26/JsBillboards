type Register {
    "Unique primary key."
    id: ID!

    "Code."
    code: String!

    "Name."
    name: String!

    "Whether the register is active."
    isActive: Boolean! @rename(attribute: "is_active")

    "If non resetable is reseted."
    resetNonResetable: Boolean! @rename(attribute: "reset_non_resetable")

    "Bank."
    bank: Float!

    "Non resetable."
    nonResetable: Float! @rename(attribute: "non_resetable")

    "Commission."
    commission: Float!

    "Register type."
    registerType: RegisterType

    "Unit."
    unit: Unit

    "When the register was created."
    createdAt: DateTime! @rename(attribute: "created_at")

    "When the register was last updated."
    updatedAt: DateTime! @rename(attribute: "updated_at")
}

input CreateRegisterInput {
    "Code."
    code: String! @rules(apply: ["required", "unique:registers,code"])

    "Name."
    name: String! @rules(apply: ["required"])

    "Whether the register is active."
    isActive: Boolean! @rename(attribute: "is_active")

    "If non resetable is reseted."
    resetNonResetable: Boolean! @rename(attribute: "reset_non_resetable")

    "Bank."
    bank: Float!

    "Non resetable."
    nonResetable: Float! @rename(attribute: "non_resetable")

    "Commission."
    commission: Float!

    "Register type."
    registerType: ConnectBelongsToRegisterType!

    "Unit."
    unit: ConnectBelongsToUnit!
}

input UpdateRegisterInput @validator {
    "Unique primary key."
    id: ID!

    "Code."
    code: String

    "Name."
    name: String

    "Whether the register is active."
    isActive: Boolean @rename(attribute: "is_active")

    "If non resetable is reseted."
    resetNonResetable: Boolean @rename(attribute: "reset_non_resetable")

    "Bank."
    bank: Float

    "Non resetable."
    nonResetable: Float @rename(attribute: "non_resetable")

    "Commission."
    commission: Float

    "Register type."
    registerType: ConnectBelongsToRegisterType

    "Unit."
    unit: ConnectBelongsToUnit
}

input ConnectBelongsToRegisterType {
    "Connect id."
    connect: ID! @rules(apply: ["required", "exists:register_types,id"])
}

input ConnectBelongsToUnit {
    "Connect id."
    connect: ID! @rules(apply: ["required", "exists:units,id"])
}

extend type Query {
    "List multiple registers."
    registers: [Register!]! @all
}

extend type Mutation {
    "Create a new register."
    createRegister(
        "Register input."
        registerInput: CreateRegisterInput! @spread
    ): Register @create

    "Update an existing register."
    updateRegister(
        "Register input."
        registerInput: UpdateRegisterInput! @spread
    ): Register @update

    "Delete an existing register."
    deleteRegister(
        "Id."
        id: ID!
    ): Register @delete
}