type Unit {
    "Unique primary key."
    id: ID!

    "Unique code."
    code: String!

    "Name."
    name: String!

    "Address."
    address: String!

    "Zip."
    zip: String!
    
    "Active period."
    activePeriod: Period @method(name: "activePeriod")

    "Whether the unit is active."
    isActive: Boolean! @rename(attribute: "is_active")

    "Whether the unit is vending."
    isVending: Boolean! @rename(attribute: "is_vending")

    "The periods that belongs to unit."
    periods: [Period!]!

    "The users that belongs to unit."
    users: [User!]!

    "The vendors that belongs to unit."
    vendors: [Vendor!]!

    "The employees that belongs to unit."
    employees: [Employee!]!

    "The gl accounts that belongs to unit."
    glAccounts: [GlAccount!]!

    "The unit type that owns the unit."
    unitType: UnitType

    "The district that owns the unit."
    district: District

    "The county that owns the unit."
    county: County

    "The city that own the unit."
    city: City

    "Start period."
    startPeriod: Date @rename(attribute: "start_period")

    "Payroll password."
    payrollPassword: String @rename(attribute: "payroll_password")

    "Email account."
    emailAccount: String @rename(attribute: "email_account")

    "Management percent."
    managementPercent: Float @rename(attribute: "management_percent")

    "Management amount."
    managementAmount: Float @rename(attribute: "management_amount")

    "Management fee type."
    managementFeeType: FeeType @rename(attribute: "management_fee_type")

    "Administrative percent."
    administrativePercent: Float @rename(attribute: "administrative_percent")

    "Administrative amount."
    administrativeAmount: Float @rename(attribute: "administrative_amount")

    "Administrative fee type."
    administrativeFeeType: FeeType @rename(attribute: "administrative_fee_type")

    "Support percent."
    supportPercent: Float @rename(attribute: "support_percent")

    "Support amount."
    supportAmount: Float @rename(attribute: "support_amount")

    "Support fee type."
    supportFeeType: FeeType @rename(attribute: "support_fee_type")

    "Payroll tax percent."
    payrollTaxPercent: Float @rename(attribute: "payroll_tax_percent")

    "Benefits percent."
    benefitsPercent: Float @rename(attribute: "benefits_percent")

    "Benefits amount."
    benefitsAmount: Float @rename(attribute: "benefits_amount")

    "Vacation amount."
    vacationAmount: Float @rename(attribute: "vacation_amount")

    "Business unsurance amount."
    businessInsuranceAmount: Float @rename(attribute: "business_insurance_amount")

    "Vending income."
    vendingIncome: Float @rename(attribute: "vending_income")

    "Commission amount."
    commissionAmount: Float @rename(attribute: "commission_amount")

    "Commission percent."
    commissionPercent: Float @rename(attribute: "commission_percent")

    "Manager first name."
    managerFirstName: String @rename(attribute: "manager_first_name")

    "Manager last name."
    managerLastName: String @rename(attribute: "manager_last_name")

    "Population."
    population: Int

    "Whether the uni is kronos."
    isKronos: Boolean @rename(attribute: "is_kronos")

    "Sysco."
    sysco: String

    "When the unit was created."
    createdAt: DateTime! @rename(attribute: "created_at")

    "When the unit was last updated."
    updatedAt: DateTime! @rename(attribute: "updated_at")
}

input CreateUnitInput {
    "Unique code."
    code: String! @rules(apply: ["required", "unique:units,code"])

    "Name."
    name: String! @rules(apply: ["required"])

    "Address."
    address: String! @rules(apply: ["required"])

    "Zip."
    zip: String! @rules(apply: ["required"])

    "Whether the unit is active."
    isActive: Boolean! @rename(attribute: "is_active")

    "Whether the unit is vending."
    isVending: Boolean! @rename(attribute: "is_vending")

    "Users."
    users: CreateUserBelongsToMany

    "Vendors."
    vendors: CreateVendorBelongsToMany

    "Employees."
    employees: CreateEmployeeBelongsToMany

    "Gl accounts."
    glAccounts: CreateGlAccountBelongsToMany

    "Unit type."
    unitType: ConnectBelongsToUnitType

    "District."
    district: ConnectBelongsToDistrict!

    "County."
    county: ConnectBelongsToCounty!

    "City."
    city: ConnectBelongsToCity!

    "Start period."
    startPeriod: Date @rename(attribute: "start_period")

    "Payroll password."
    payrollPassword: String @rename(attribute: "payroll_password")

    "Email account."
    emailAccount: String @rename(attribute: "email_account") @rules(apply: ["filled", "email"])

    "Management percent."
    managementPercent: Float @rename(attribute: "management_percent")

    "Management amount."
    managementAmount: Float @rename(attribute: "management_amount")

    "Management fee type."
    managementFeeType: FeeType @rename(attribute: "management_fee_type")

    "Administrative percent."
    administrativePercent: Float @rename(attribute: "administrative_percent")

    "Administrative amount."
    administrativeAmount: Float @rename(attribute: "administrative_amount")

    "Administrative fee type."
    administrativeFeeType: FeeType @rename(attribute: "administrative_fee_type")

    "Support percent."
    supportPercent: Float @rename(attribute: "support_percent")

    "Support amount."
    supportAmount: Float @rename(attribute: "support_amount")

    "Support fee type."
    supportFeeType: FeeType @rename(attribute: "support_fee_type")

    "Payroll tax percent."
    payrollTaxPercent: Float @rename(attribute: "payroll_tax_percent")

    "Benefits percent."
    benefitsPercent: Float @rename(attribute: "benefits_percent")

    "Benefits amount."
    benefitsAmount: Float @rename(attribute: "benefits_amount")

    "Vacation amount."
    vacationAmount: Float @rename(attribute: "vacation_amount")

    "Business unsurance amount."
    businessInsuranceAmount: Float @rename(attribute: "business_insurance_amount")

    "Vending income."
    vendingIncome: Float @rename(attribute: "vending_income")

    "Commission amount."
    commissionAmount: Float @rename(attribute: "commission_amount")

    "Commission percent."
    commissionPercent: Float @rename(attribute: "commission_percent")

    "Manager first name."
    managerFirstName: String @rename(attribute: "manager_first_name")

    "Manager last name."
    managerLastName: String @rename(attribute: "manager_last_name")

    "Population."
    population: Int

    "Whether the uni is kronos."
    isKronos: Boolean @rename(attribute: "is_kronos")

    "Sysco."
    sysco: String
}

input UpdateUnitInput @validator {
    "Id."
    id: ID!

    "Unique code."
    code: String

    "Name."
    name: String

    "Address."
    address: String

    "Zip."
    zip: String

    "Whether the unit is active."
    isActive: Boolean @rename(attribute: "is_active")

    "Whether the unit is vending."
    isVending: Boolean @rename(attribute: "is_vending")

    "Users."
    users: CreateUserBelongsToMany

    "Vendors."
    vendors: CreateVendorBelongsToMany

    "Employees."
    employees: CreateEmployeeBelongsToMany

    "Gl accounts."
    glAccounts: CreateGlAccountBelongsToMany

    "Unit type."
    unitType: ConnectBelongsToUnitType

    "District."
    district: ConnectBelongsToDistrict

    "County."
    county: ConnectBelongsToCounty

    "City."
    city: ConnectBelongsToCity

    "Start period."
    startPeriod: Date @rename(attribute: "start_period")

    "Payroll password."
    payrollPassword: String @rename(attribute: "payroll_password")

    "Email account."
    emailAccount: String @rename(attribute: "email_account")

    "Management percent."
    managementPercent: Float @rename(attribute: "management_percent")

    "Management amount."
    managementAmount: Float @rename(attribute: "management_amount")

    "Management fee type."
    managementFeeType: FeeType @rename(attribute: "management_fee_type")

    "Administrative percent."
    administrativePercent: Float @rename(attribute: "administrative_percent")

    "Administrative amount."
    administrativeAmount: Float @rename(attribute: "administrative_amount")

    "Administrative fee type."
    administrativeFeeType: FeeType @rename(attribute: "administrative_fee_type")

    "Support percent."
    supportPercent: Float @rename(attribute: "support_percent")

    "Support amount."
    supportAmount: Float @rename(attribute: "support_amount")

    "Support fee type."
    supportFeeType: FeeType @rename(attribute: "support_fee_type")

    "Payroll tax percent."
    payrollTaxPercent: Float @rename(attribute: "payroll_tax_percent")

    "Benefits percent."
    benefitsPercent: Float @rename(attribute: "benefits_percent")

    "Benefits amount."
    benefitsAmount: Float @rename(attribute: "benefits_amount")

    "Vacation amount."
    vacationAmount: Float @rename(attribute: "vacation_amount")

    "Business unsurance amount."
    businessInsuranceAmount: Float @rename(attribute: "business_insurance_amount")

    "Vending income."
    vendingIncome: Float @rename(attribute: "vending_income")

    "Commission amount."
    commissionAmount: Float @rename(attribute: "commission_amount")

    "Commission percent."
    commissionPercent: Float @rename(attribute: "commission_percent")

    "Manager first name."
    managerFirstName: String @rename(attribute: "manager_first_name")

    "Manager last name."
    managerLastName: String @rename(attribute: "manager_last_name")

    "Population."
    population: Int

    "Whether the uni is kronos."
    isKronos: Boolean @rename(attribute: "is_kronos")

    "Sysco."
    sysco: String
}

input ConnectBelongsToUnitType {
    "Connect id."
    connect: ID @rules(apply: ["exists:unit_types,id"])

    "Disconnect."
    disconnect: Boolean
}

input ConnectBelongsToDistrict {
    "Connect id."
    connect: ID! @rules(apply: ["required", "exists:districts,id"])
}

input ConnectBelongsToCounty {
    "Connect id."
    connect: ID! @rules(apply: ["required", "exists:counties,id"])
}

input ConnectBelongsToCity {
    "Connect id."
    connect: ID! @rules(apply: ["required", "exists:cities,id"])
}

input CreateUserBelongsToMany @validator {
    "Sync existing id's."
    sync: [ID!]

    "Sync existing id's without detaching."
    syncWithoutDetaching: [ID!]

    "Disconnect existing id's."
    disconnect: [ID!]
}

input CreateVendorBelongsToMany {
    "Sync existing id's."
    sync: [ID!] @rules(apply: ["exists:vendors,id"])

    "Sync existing id's without detaching."
    syncWithoutDetaching: [ID!] @rules(apply: ["exists:vendors,id"])

    "Disconnect existing id's."
    disconnect: [ID!] @rules(apply: ["exists:vendors,id"])
}

input CreateEmployeeBelongsToMany {
    "Sync existing id's."
    sync: [ID!] @rules(apply: ["exists:employees,id"])

    "Sync existing id's without detaching."
    syncWithoutDetaching: [ID!] @rules(apply: ["exists:employees,id"])

    "Disconnect existing id's."
    disconnect: [ID!] @rules(apply: ["exists:employees,id"])
}

input CreateGlAccountBelongsToMany {
    "Sync existing id's."
    sync: [ID!] @rules(apply: ["exists:gl_accounts,id"])

    "Sync existing id's without detaching."
    syncWithoutDetaching: [ID!] @rules(apply: ["exists:gl_accounts,id"])

    "Disconnect existing id's."
    disconnect: [ID!] @rules(apply: ["exists:gl_accounts,id"])
}

extend type Query {
    "Find a single unit by an identifying attribute."
    unit(
        "Search by primary key."
        id: ID! @eq
    ): Unit @find

    "List multiple units."
    units: [Unit!]! @all
}

extend type Mutation {
    "Create a new unit."
    createUnit(
        "Unit input."
        unitInput: CreateUnitInput! @spread
    ): Unit @create

    "Update an existing unit."
    updateUnit(
        "Unit input."
        unitInput: UpdateUnitInput! @spread
    ): Unit @update

    "Delete an existing unit."
    deleteUnit(
        "Id."
        id: ID!
    ): Unit @delete
}